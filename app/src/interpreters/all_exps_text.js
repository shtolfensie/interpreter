let text = 'const EOF = \"EOF\",\r\n  NUM = \"NUM\",\r\n  PLUS = \"PLUS\",\r\n  MINUS = \"MINUS\",\r\n  DIVIDED = \"DIVIDED\",\r\n  TIMES = \"TIMES\";\r\n\r\nconst Interpreter = program => {\r\n  program = program.split(\"\").filter(c => (c !== \" \" ? true : false));\r\n  let pos = 0;\r\n  let curr_token = \"\";\r\n\r\n  const get_next_token = () => {\r\n    if (pos > program.length - 1) return { type: EOF, value: null };\r\n\r\n    let cur_char = program[pos];\r\n\r\n    if (isNumber(cur_char)) {\r\n      return getNumber(cur_char);\r\n\r\n      \/\/ return { type: NUM, value: parseInt(cur_char) };\r\n    } else if (cur_char === \"+\") {\r\n      advance();\r\n      return { type: PLUS, value: cur_char };\r\n    } else if (cur_char === \"-\") {\r\n      advance();\r\n      return { type: MINUS, value: cur_char };\r\n    } else if (cur_char === \"\/\") {\r\n      advance();\r\n      return { type: DIVIDED, value: cur_char };\r\n    } else if (cur_char === \"*\") {\r\n      advance();\r\n      return { type: TIMES, value: cur_char };\r\n    }\r\n  };\r\n\r\n  const advance = () => {\r\n    pos++;\r\n  }\r\n\r\n  const error = (msg = \"Error\") => {\r\n    throw msg;\r\n  };\r\n\r\n  const isNumber = str => {\r\n    return !Number.isNaN(parseInt(str));\r\n  };\r\n\r\n  const getNumber = num => {\r\n    advance();\r\n    if (isNumber(program[pos])) {\r\n      return getNumber(`${num}${program[pos]}`);\r\n    } else {\r\n      return { type: NUM, value: parseInt(num) };\r\n    }\r\n  };\r\n\r\n  const eat = type => {\r\n    if (curr_token.type === type) curr_token = get_next_token();\r\n    else {\r\n      error(\"Wrong token type\");\r\n    }\r\n  };\r\n\r\n  const term = () => {\r\n    let token = curr_token;\r\n    eat(NUM);\r\n    return token;\r\n  }\r\n\r\n  const evaluation = () => {\r\n    curr_token = get_next_token();\r\n    let res = term();\r\n\r\n    while (curr_token.type !== EOF) {\r\n      let op = curr_token;\r\n      if (op.type === PLUS) {\r\n        eat(PLUS);\r\n        res.value += term().value;\r\n      }\r\n      else if (op.type === MINUS) {\r\n        eat(MINUS);\r\n        res.value -= term().value;\r\n\r\n      }\r\n      else if (op.type === DIVIDED) {\r\n        eat(DIVIDED);\r\n        res.value \/= term().value;\r\n      }\r\n      else if (op.type === TIMES) {\r\n        eat(TIMES);\r\n        res.value *= term().value;\r\n      }\r\n    }\r\n\r\n    return res.value;\r\n  };\r\n\r\n  return evaluation(program);\r\n\r\n};\r\n\r\nconst interpreter_full = program => {\r\n\r\n  try {\r\n    let res = Interpreter(program);\r\n    return { ast: \'No AST generated\', output: res }\r\n\r\n  } catch (e) {\r\n    console.error(e);\r\n    return { ast: \'Error\', output: \'Error\' };\r\n  }\r\n\r\n}\r\n\r\nexport default interpreter_full;';
export default text;